{"version":3,"sources":["assets/icon-arrow.svg","apikeys.js","MapComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ipApi","MapComponent","lat","lng","useState","mymap","setMymap","useEffect","window","L","map","setView","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","accessToken","addTo","marker","className","App","text","setText","ipInfo","setIpInfo","fetchIpInfo","a","ip","fetch","response","json","data","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","src","arrow","alt","location","country","region","city","timezone","as","name","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5463a7b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","export const mapApi = 'pk.eyJ1IjoiYXlib3NzIiwiYSI6ImNrZ2I1dGs4bTAzbDYyeXA4d2VxcG1vbGUifQ.Ha_qoQge9-syNGykpCIUYw';\r\nexport const ipApi = 'at_mG6QBXqk8Z3XwwGPxyBBJAEmzkXs0'; ","import React,{useState,useEffect} from 'react'\r\nimport {mapApi} from './apikeys';\r\n\r\nfunction MapComponent({lat,lng}) {\r\n    const [mymap, setMymap] = useState(null);\r\n    useEffect(()=>{\r\n        if(window.L){\r\n            setMymap(window.L.map('mapid'))\r\n        }\r\n    },[])\r\n    useEffect(()=>{\r\n        if(!mymap){\r\n            return\r\n        }\r\n        mymap.setView([lat, lng], 13);\r\n        window.L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\r\n            attribution: 'Map data from Leaflet',\r\n            maxZoom: 18,\r\n            id: 'mapbox/streets-v11',\r\n            tileSize: 512,\r\n            zoomOffset: -1,\r\n            accessToken: mapApi \r\n        }).addTo(mymap);\r\n        window.L.marker([lat, lng]).addTo(mymap);\r\n    },[lat,lng,mymap])\r\n    \r\n    return (\r\n        <div id=\"mapid\" className=\"map\">\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapComponent\r\n","import React, {useState, useEffect} from 'react';\nimport MapComponent from './MapComponent';\nimport arrow  from './assets/icon-arrow.svg';\nimport './App.css';\nimport {ipApi} from './apikeys'\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [ipInfo, setIpInfo] = useState('');\n  const fetchIpInfo = async (ip='')=>{\n    const response = await fetch(`https://geo.ipify.org/api/v1?apiKey=${ipApi}&ipAddress=${ip}`)\n    const data = await response.json();\n    setIpInfo(data);\n    // &ipAddress=8.8.8.8\n  }\n  useEffect(()=>{\n    fetchIpInfo();\n  },[])\n  const handleSubmit = (e)=>{\n    e.preventDefault();\n    fetchIpInfo(text);\n  }\n  \n  return (\n    <div className=\"app_container\">\n    <div className=\"app\">\n      <h1 className=\"app__heading\">IP Address Tracker</h1>\n      <form className=\"app__form\" onSubmit={handleSubmit}>\n        <input type=\"text\" className=\"app__form--input\" \n        value={text}\n        placeholder=\"Search for any address or domain\" \n        onChange={(e)=>setText(e.target.value)}/>\n        <button className=\"app__form--btn\">\n          <img src={arrow} alt=\"submit\" className=\"app__form--svg\" />\n        </button>\n      </form>\n      {ipInfo && <div className=\"details\">\n        <div className=\"details__stuff\">\n          <h3 className=\"details__heading\">\n            IP Address\n          </h3>\n        <p className=\"details__info\">{ipInfo?.ip}</p>\n        </div>\n        <div className=\"details__stuff\">\n          <h3 className=\"details__heading\">\n            Location\n          </h3>\n          <p className=\"details__info\">\n          {`${ipInfo?.location?.country} ${ipInfo?.location?.region} ${ipInfo?.location?.city}`}\n          </p>\n        </div>\n        <div className=\"details__stuff\">\n          <h3 className=\"details__heading\">\n            Timezone\n          </h3>\n          <p className=\"details__info\">\n            {`UTC${ipInfo?.location?.timezone}`}\n          </p>\n        </div>\n        <div className=\"details__stuff\">\n          <h3 className=\"details__heading\">\n            ISP\n          </h3>\n          <p className=\"details__info\">\n          {`${ipInfo?.as?.name}`}\n          </p>\n        </div>\n      </div>\n    }\n    </div>\n    <div>\n     {ipInfo && <MapComponent lat={ipInfo?.location?.lat} lng={ipInfo?.location?.lng}/>}\n    </div>\n    <footer className=\"footer\">\n      Project from Frontend Mentor coded by \n      <a href=\"https://github.com/Ayboss\" className=\"footer__link\" target=\"_blank\"> dudeYouHaveNoIdea</a>\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}